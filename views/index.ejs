<!DOCTYPE html>
<html lang="PT-BR">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/png" sizes="64x64" href="/semantic-icon.png">
    <link rel="stylesheet" href="/css/styles.css">
    <title>Semantic - AssociaPalavra</title>
</head>    
<body>
    <div id="modal" class="modal">
        <!-- Modal content -->
        <div class="modal-content">
            <span class="close">&times;</span>
            <p>Este é um teste de associação de palavras.</p>
            Serão apresentadas palavras na tela que chamaremos de 'Palavras Sonda'.
            A cada 'Palavra Sonda' apresentada, você deve ler e então escrever na caixa de texto a
            primeira palavra que lhe vier à mente e clicar no botão 'Enviar'
            ou apertar 'Enter'.</p>
            <p>Caso deseje, você pode pular palavras apertando o botão 'Pular',
                embora isso não seja recomendado e deva ser usado como última opção!!</p>
            <p>POR FAVOR, RELEIA AS INSTRUÇÕES E APERTE EM COMEÇAR APENAS QUANDO SE SENTIR CONFIANTE DE QUE ESTÁ
                PREPARADO!</p>
            <button class="btn" id="init-btn">Começar</button>
        </div>

    </div>
    <div class="container">
        <div class="titulo">AssociaPalavra</div>
        <div class="palavraSonda" id="sonda"></div>
        <form action="" id="form" autocomplete="off" autocapitalize="off">
            <input class="word" type="text" id="word" placeholder="Digite a palavra">
            <p class="error word-error" id="word-error"></p>
            <div class="row-btn">
                <button class="btn" id="jump-btn" type="button">Pular</button>
                <button class="btn" id="send-btn" type="submit">Enviar</button>
            </div>
        </form>
    </div>    
    <script>


        /**
        * A fazer:
        * pesquisar melhor forma de identificar uma jogador
        * Cálculo do sorteio baseado em frequência**/

        const num_max_de_palavras = 100;
        var num_de_palavras = 0;
        var lista_palavras_sonda = [];
        var lista_resultados = [];
        var time_in = new Date;

        const selectedWords = '<%= selectedWords %>'.split(',');
        // console.log('selectedWords', selectedWords);

        function getElement(q) {
            return document.querySelector(q);
        }

        function mag(a) {
            return Math.sqrt(a.reduce(function (sum, val) {
                return sum + val * val;
            }, 0));
        }

        function dot(f1, f2) {
            return f1.reduce(function (sum, a, idx) {
                return sum + a * f2[idx];
            }, 0);
        }

        function getCosSim(f1, f2) {
            if (!Array.isArray(f1) || !Array.isArray(f2)) {
            throw new Error("f1 and f2 should be arrays");
            }
            return dot(f1, f2) / (mag(f1) * mag(f2));
        }




        function getNewWord(sonda) {
            // define index based on the actual sonda
            var num = selectedWords.indexOf(sonda)
            num == -1 ? num = 0 : num++;
            var nova_palavra = selectedWords[num];
            lista_palavras_sonda.push(nova_palavra);
            getElement('#sonda').innerHTML = nova_palavra.toLowerCase();
            time_in = new Date();
            return nova_palavra;
        }

        function getDate() {
            const now = new Date().toLocaleDateString();
            return now;
        }

        function instructions() {
            var modal = getElement("#modal");
            var span = getElement(".close");

            modal.style.display = "block";

            span.onclick = function () {
                modal.style.display = "none";
            }

            getElement('#init-btn').addEventListener('click', () => {
                modal.style.display = "none";
                AssociaPalavra.init();
            });
        }

        class RemoteBackend {
            async getModel(probeWord, word) {
                const url = "/model2/" + probeWord + "/" + word;
                const response = await fetch(url);
                try {
                    return await response.json();
                } catch (e) {
                    return null;
                }
            }
            async saveTest(dataToSend) {
                const url = "/save_test/";
                const response = await fetch(
                    url, {
                    credentials: "same-origin",
                    mode: "same-origin",
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: dataToSend
                });
                try {
                    return await response.json();
                } catch (e) {
                    return null;
                }
            }
        };

        class Resultado {
            constructor(id, data, tempo, palavra_sonda, palavra_respondida, similaridade) {
                this.id = id;
                this.data = data;
                this.tempo = tempo;
                this.palavra_sonda = palavra_sonda;
                this.palavra_respondida = palavra_respondida;
                this.similaridade = similaridade;
            }
        }

        let AssociaPalavra = (function () {
            let getModel, saveTest, backend, resultado;
            let palavra_sonda = '';
            let time_out = 0;

            async function init() {
                if (backend == undefined) {
                    backend = new RemoteBackend();
                }
                getModel = backend.getModel.bind(backend);
                saveTest = backend.saveTest.bind(backend);

                palavra_sonda = getNewWord(0);
                getElement('#jump-btn').addEventListener('click', jump);

                //recebe palavra do usuário
                getElement('#form').addEventListener('submit', input);
            }

            async function jump(event) {
                event.preventDefault();
                time_out = new Date();
                loadTest(0, time_out, time_in, palavra_sonda, 'NaN');
            }

            async function input(event) {
                event.preventDefault();

                time_out = new Date();

                getElement("#word-error").style.display = "none";
                getElement('#word').focus();

                let palavra_respondida = getElement('#word').value;
                if (!palavra_respondida) {
                    getElement('#word-error').innerHTML = `Digite uma palavra.`;
                    getElement("#word-error").style.display = "block";
                    time_in = new Date();
                    return false;
                }

                getElement('#word').value = "";
                console.log('round ', num_de_palavras, 'SONDA ', palavra_sonda, 'RESP ', palavra_respondida);
                const vetores = await getModel(palavra_sonda, palavra_respondida);
                num_de_palavras+=1;
                if (!vetores.vec_2) {                    
                    getElement('#word-error').innerHTML = `A palavra: ${palavra_respondida} não consta no vocabulário.<br><br>Uma nova palavra será sorteada em 2s.`;
                    getElement("#word-error").style.display = "block";                    
                    setTimeout(() => {     
                        loadTest(0, time_out, time_in, palavra_sonda, palavra_respondida);                   
                        getElement('#sonda').innerHTML =  `${palavra_sonda}`.toLowerCase();
                        getElement("#word-error").style.display = "none";                                      
                  
                    }, 2000);
                    return false;
                }               

                const similaridade = getCosSim(vetores.vec_1, vetores.vec_2);                
                console.log('SONDA ', palavra_sonda, 'RESP ', palavra_respondida);
                loadTest(similaridade, time_out, time_in, palavra_sonda, palavra_respondida);
                

            }

            async function loadTest(similaridade, time_out, time_in, sonda, respondida) {
                const id = num_de_palavras;
                const tempo_de_resposta = time_out.getTime() - time_in.getTime();
                let resultado = new Resultado(id, getDate(), tempo_de_resposta, sonda,
                    respondida, similaridade);
                lista_resultados.push(resultado);
                console.log(resultado);
                const saveStatus = await saveTest(JSON.stringify(resultado));
                if (saveStatus == 500) {
                    return false;
                }
                console.log('num palavras', num_de_palavras, num_max_de_palavras)
                if (num_de_palavras == num_max_de_palavras) {
                    endTest();
                    getElement("#sonda").style.display = "none";                                      
                    return false
                }
                palavra_sonda = getNewWord(sonda);
                return true;
            }

            function endTest() {
                console.log('end')
                getElement('#form').removeEventListener('submit', input);
                getElement('#jump-btn').removeEventListener('click', jump);
                getElement('#form').innerHTML = '';
                getElement('#sonda').innerHTML = 'O arquivo csv com o resultado do seu teste está sendo gerado.';
                const div = getElement(".btn-row");
                let fatherElement = getElement(".container");

                var _gerarCsv = function () {
                    var csv = 'tempo, palavra_sonda, palavra_respondida, similaridade\n';

                    lista_resultados.forEach(function (row) {
                        csv += row.tempo;
                        csv += ',' + row.palavra_sonda;
                        csv += ',' + row.palavra_respondida;
                        csv += ',' + row.similaridade;
                        csv += '\n';
                    });

                    var fileElement = document.createElement('a', id = "file");
                    fileElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
                    fileElement.target = '_blank';
                    fileElement.download = 'Associa_Palavra.csv';
                    fileElement.textContent = "Click para baixar"
                    fatherElement.appendChild(fileElement);
                };
                _gerarCsv();
            }

            return {
                init: init
            };
        })();

        window.addEventListener('load', async () => {
            instructions();
        });
    </script>



</body>

</html>
